Issues in fourth pass over DN 8
===============================

Loss of comments when not mapping to identical DN 2 segment
-----------------------------------------------------------

I just noticed that if we keep the anchor segment (with equivalent text), like so:

% grep dn2:43\.2 /dn8*
dn8-map-orig-setup.json:# "dn2:43.2 ANCHOR delete this segment (after virtnum reset), which replaces dn2:43.2",
dn8-penultimate-map.json:# "dn8:18.6 ANCHOR delete dn2:43.2",

instead of mapping it to its DN 2 equivalent, then we lose the commentary footnote, which is attached
to the DN 2 segment, but not present in the DN 8 cognate and so absent for this anchor segment. So in such
cases, we should map to DN 2, and 

PERHAPS WE NEED TO MAKE ALWAYS PREFERRING THE DN2 SEGMENT TO "this sutta's" SEGMENT A MATTER OF POLICY.

So I need to put that in policy. But I'm done with the fourth pass over DN 8 and this will have to wait
until the 5th pass.  I've added this policy to the procedural write-up under the tagging step: henceforth
the only segments we'll use the ANCHOR tag (which results in this problem) on are addendum segments
which have no DN 2 equivalent.  All other segments that *do* have DN 2 equivalents will always be tagged
ANCHOR-REMAP on the fifth pass and after.


Ambiguous placement of dn8:19.1
-------------------------------

dn8:19.1 could be mapped to any one of 
	dn2:56.1
	dn2:57.1
	dn2:58.1
	dn2:59.1
	dn2:60.1
	dn2:61.1
	dn2:62.1
as these segments all have identical text. They're a kind of
"long-ethics-section refrain".

On the fourth pass, at first I mapped it to dn2:62.1 for some reason.

But I like the virtual segment IDs that result from mapping it to
dn2:56.1 better, as I did on the third pass. So I went back and
fixed it, and we're making this a policy decision:

Always map dn8:19.1 to dn2:56.1


Split anchor segment dn8:20.1-2
-------------------------------
dn8:20.1 and dn8:20.2 are an unnecessarily split anchor segment.
The two segments together correspond to a single DN2 segment,
dn2:83.1

The splitting and mismatch is in the PƒÅli root text, so there's no
messing around with it. 

This can be handled with a pe-subst.json entry, which is why
there's a funny-looking subst entry for dn8:20.2 blanking out
the line (we remapped dn8:20.1 to the segment that contains the 
equivalent of both 20.1 & 20.2).
